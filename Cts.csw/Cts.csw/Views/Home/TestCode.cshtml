@model Cts.csw.Models.TestCodeViewModel

@{
    ViewBag.Title = "Test Code";
}

<div class="col-md-12">
    <h2>Your Test Code</h2>
    <hr />
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group row">
            @Html.LabelFor(model => model.TheCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-12">
                @Html.TextAreaFor(model => model.TheCode, new { @class = "form-control", rows = 25, style="width:100%"})
            </div>
            @Html.ValidationMessageFor(model => model.TheCode, "", new { @class = "text-danger" })
        </div>

        <div class="form-group row">
            <div class="col-md-1">
                <input type="submit" value="Go" class="btn btn-default" />
            </div>
        </div>
    }

    @if (Model.TestCases != null)
    {
        @*  We have run the code at least once  *@
    if (!Model.ErrorMessage.IsEmpty())
    {
            @* compilation error *@
            <h4>ERROR</h4>
            <p>@Html.Raw(Model.ErrorMessage.Replace("\n", "<br />"))</p>
    }
    else
    {
            <h4>Output</h4>

            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Test Case Number</th>
                        <th>Expected Result</th>
                        <th>Actual Result</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int c = 0; c < Model.TestCases.Count; c++)
                    {
                        <tr>
                            <td>@(c+1)</td>
                            <td>@Html.Raw(Model.TestCases[c].ExpectedOutput.Replace("\n", "<br/>"))</td>
                            <td>@Html.Raw(Model.TestCases[c].ActualOutput.Replace("\n", "<br/>"))</td>
                        </tr>
                    }
                    
                </tbody>
            </table>
        }
    }

    <br />

    <form>
        <div class="form-group row">
            <label for="myTest" class="control-label col-md-12">Awesomplete Autocomplete Test</label>
            <div class="col-md-12">
                <textarea name="myTest" rows="6" id="myTest" class="form-control awesomplete col-md-12" data-list="This, Is, Test, Everyone"></textarea>
            </div>
        </div>
    </form>
</div>




<script type="text/javascript" src="https://cdn.rawgit.com/LeaVerou/awesomplete/gh-pages/awesomplete.min.js"></script>
<script>
    var input = document.getElementById("myTest");

    var awesomplete = new Awesomplete(input, {
        filter: function (text, input) {
            return Awesomplete.FILTER_CONTAINS(text, input.match(/[^,\(\.]*$/)[0]);
        },

        replace: function (text) {
            var before = this.input.value.match(/^.+[,\.][\s\.\(]*|/)[0];
            this.input.value = before + text + ", ";
        }
    });
</script>

<script type="text/javascript" src="~/Scripts/codemirror.js"></script>
<script type="text/javascript" src="~/Scripts/show-hint.js"></script>
<script type="text/javascript" src="~/Scripts/clike.js"></script>

<script type="text/javascript">
    
    window.onload = function () {
        function getHints(cm, options) {
            var cur = cm.getCursor();
            var result = ['just', 'a', 'test'];
            return {
                list: result,
                from: cur,
                to: cur
            };
        }

        function insertStr(cm, pos, str, option_str) {
            cm.replaceRange(str, pos, null, option_str);
            cm.setCursor({ line: pos.line, ch: pos.ch + str.length });
        }

        var myCodeMirror = CodeMirror.fromTextArea(document.getElementById("TheCode"), {
            parserfile: ["/Scripts/tokenizecsharp.js", "/Scripts/parsecsharp.js"],
            stylesheet: "/Content/csharpcolors.css",
            path: "/Scripts/",
            height: "600px",
            lineNumbers: true,
            mode: "text/x-csharp",
            matchBrackets: true,
            indentUnit: 4,
            extraKeys: {
                ".": function (cm) {
                    insertStr(cm, cm.getCursor(), '.');
                    CodeMirror.showHint(cm, getHints);
                },
                Cmd: function (cm) {
                    insertStr(cm, cm.getCursor(), '');
                    CodeMirror.showHint(cm, getHints);
                }
            }
        });

        CodeMirror.commands.autocomplete = function (cm) {
            CodeMirror.showHint(cm, getHints);
        }

        function highlightLine(lineNumber) {

            //Line number is zero based index
            var actualLineNumber = lineNumber - 1;

            //Set line CSS class to the line number & affecting the background of the line with the css class of line-error
            myCodeMirror.addLineClass(actualLineNumber, 'background', 'line-error');
        }

        @if (Model.ErrorList.Count() > 0 )
        {

            foreach (var error in Model.ErrorList)
            {
                <text>
        highlightLine(@error.LineNumber);
                </text>
            }

        }

    };



</script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
