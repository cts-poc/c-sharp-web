@model Cts.csw.Models.TestCodeViewModel

@{
    ViewBag.Title = "TestCode";
}



<div class="col-md-12">
    <h2>TestCode</h2>
    <h4>TestCodeViewModel</h4>
    <hr />
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group row">
                @Html.LabelFor(model => model.TheCode, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-12">
                    @Html.TextAreaFor(model => model.TheCode, new { @class = "form-control", rows = 25, style="width:100%"})
                </div>
                @Html.ValidationMessageFor(model => model.TheCode, "", new { @class = "text-danger" })
            </div>

            <div class="form-group row">
                <div class="col-md-1">
                    <input type="submit" value="Go" class="btn btn-default" />
                </div>
            </div>
    }

    <form>
        <div class="form-group row">
            <label for="myTest" class="control-label col-md-12">Awesomplete Autocomplete Test</label>
            <div class="col-md-12">
                <textarea name="myTest" rows="6" id="myTest" class="form-control awesomplete col-md-12" data-list="This, Is, Test, Everyone"></textarea>
            </div>
        </div>
    </form>


    @if (Model.Results != null)
    {
        <h4>Output</h4>

        <form>
            <input type="text" name="results" class="form-control" />
        </form>
        foreach (string result in Model.Results)
        {
            <b>@result</b><br />
        }
    }

    <div>
        @Html.ActionLink("Back Home", "Index")
    </div>
</div>

<script type="text/javascript" src="https://cdn.rawgit.com/LeaVerou/awesomplete/gh-pages/awesomplete.min.js"></script>
<script>
    var input = document.getElementById("myTest");

    var awesomplete = new Awesomplete(input, {
        filter: function (text, input) {
            return Awesomplete.FILTER_CONTAINS(text, input.match(/[^,\(\.]*$/)[0]);
        },

        replace: function (text) {
            var before = this.input.value.match(/^.+[,\.][\s\.\(]*|/)[0];
            this.input.value = before + text + ", ";
        }
    });
</script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
